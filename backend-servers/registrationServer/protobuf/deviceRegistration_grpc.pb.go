// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: deviceRegistration.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceRegistrationClient is the client API for DeviceRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceRegistrationClient interface {
	RegisterDevice(ctx context.Context, in *DeviceRegistrationRequest, opts ...grpc.CallOption) (*DeviceRegistrationResponse, error)
}

type deviceRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceRegistrationClient(cc grpc.ClientConnInterface) DeviceRegistrationClient {
	return &deviceRegistrationClient{cc}
}

func (c *deviceRegistrationClient) RegisterDevice(ctx context.Context, in *DeviceRegistrationRequest, opts ...grpc.CallOption) (*DeviceRegistrationResponse, error) {
	out := new(DeviceRegistrationResponse)
	err := c.cc.Invoke(ctx, "/DeviceRegistration.DeviceRegistration/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRegistrationServer is the server API for DeviceRegistration service.
// All implementations must embed UnimplementedDeviceRegistrationServer
// for forward compatibility
type DeviceRegistrationServer interface {
	RegisterDevice(context.Context, *DeviceRegistrationRequest) (*DeviceRegistrationResponse, error)
	mustEmbedUnimplementedDeviceRegistrationServer()
}

// UnimplementedDeviceRegistrationServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceRegistrationServer struct {
}

func (UnimplementedDeviceRegistrationServer) RegisterDevice(context.Context, *DeviceRegistrationRequest) (*DeviceRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedDeviceRegistrationServer) mustEmbedUnimplementedDeviceRegistrationServer() {}

// UnsafeDeviceRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceRegistrationServer will
// result in compilation errors.
type UnsafeDeviceRegistrationServer interface {
	mustEmbedUnimplementedDeviceRegistrationServer()
}

func RegisterDeviceRegistrationServer(s grpc.ServiceRegistrar, srv DeviceRegistrationServer) {
	s.RegisterService(&DeviceRegistration_ServiceDesc, srv)
}

func _DeviceRegistration_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistrationServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceRegistration.DeviceRegistration/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistrationServer).RegisterDevice(ctx, req.(*DeviceRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceRegistration_ServiceDesc is the grpc.ServiceDesc for DeviceRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeviceRegistration.DeviceRegistration",
	HandlerType: (*DeviceRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _DeviceRegistration_RegisterDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deviceRegistration.proto",
}
